# mongodb is web based mongodb admin interface to do changes in database
# config contains 3 parts 1. metadata 2. specification 3. status
# status part is automatically generate by kubernetes when configuratin file is applied
# status helps kubernetes compare two states and if not matches update it to newer state
# imagine you apply config file, change replicate from 2 to 3 and reapply. now kubernetes can use status to achieve the desired state
# as it will be a front end app so apps/v1
apiVersion: apps/v1
# configuration file is for deployment- similarly we can create config files for services then type will be changed here
kind: Deployment
metadata:
# name of the deployment
  name: mongo-express-deployment
  labels:
    app: mongo-express

spec:
#number of replicas of deployment
  replicas: 1
  # selector here is devinec as mongodb now whichever file with metdata/labels/app = mongodb it will select that eg. with selector service knows to which deployment it shall connect to
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongo-express
        # latest as label
          image: mongo-express:latest
          # image configuration . seee config for mongo on docker hub 
          ports:
          # by default mongo express runs inside container at 8081 see at docker hub
            - containerPort: 8081
            # mongo express image needs three environment variables, address of db to connect to, admin username and password
          env:
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              # value: write value here directly
              valueFrom:
                secretKeyRef:
                # after applying secret file. use kubectl get secret to know the name of the pushed secret to cluster
                  name: mongodb-secret
                  # value which we want to fetch from secret is fetched with the help of key defined in secret file
                  key: mongo-root-username

            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              # value: password
              valueFrom:
              # extract value from secret file present in cluster
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-password
            - name: ME_CONFIG_MONGODB_SERVER 
              # value: password
              valueFrom:
              # extract value from config map file present in cluster
                configMapKeyRef:
                  name: mongodb-configmap
                  key: database_url
# three dash is used for document separation in yaml
# it is good to write deployment and its acssociated service in same file
# we cannot have deployment without a service
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
spec:
# here mongo-express is written as selector. now kubernetes will see deployment with metadata label = mongodb and will associate this service to it
  selector:
    app: mongo-express
  # makes it a external service
  # internal service also act as loadbalancer. but defining this type will give external ip address to the service thorugh which we can access the service
  type: LoadBalancer
  ports:
    - protocol: TCP
    # service needs its own port to running. so it is defined here. we can use same port
      port: 8081
      # on which port service shall make request. this shall match with the container port defined in deployment
      targetPort: 8081
      # at which port we need to access this external service
      # range - 30k - 32k
      # internal servide has type clusterIP, external service has type loadbalancer
      # after applying file use kubectl get service - you can see this external service created
      # use minikube service <service_name> to get public ip address of the external service
      nodePort: 30000
